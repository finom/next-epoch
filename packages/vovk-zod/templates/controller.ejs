<% var modulePascalName = _.upperFirst(_.camelCase(moduleName)); %>
<% var modulePascalNamePlural = pluralize(modulePascalName); %>
<% var ControllerName = modulePascalName + 'Controller'; %>
<% var RPCName = modulePascalName + 'RPC'; %>
<% var ServiceName = modulePascalName + 'Service'; %>
---
filePath: <%= getModulePath(segmentName, moduleName, ControllerName + '.ts') %> # Relative to "modules" dir
sourceName: <%= ControllerName %> # Used to define import declaration in a segment route file for the given class
compiledName: <%= RPCName %> # Used to define a compiled object name
---

import { prefix, get, put, post, del } from 'vovk';
<% if(withService) { %>
import <%= ServiceName %> from './<%= ServiceName %>';
<% } %>
import { withZod } from 'vovk-zod';
import { z } from 'zod';

@prefix('<%= _.kebabCase(moduleName).toLowerCase() %>')
export default class <%= ControllerName %> {
    @get()
    async get<%= modulePascalNamePlural %> = withZod(null, z.object({ q: z.string() }), (req) => {
        const q = req.nextUrl.searchParams.get('q');
        <% if(withService) { %>
        return <%= ServiceName %>.getMyThingsExample(q);
        <% } else { %>
        return { q };
        <% } %>
    });

    @put(':id')
    static update<%= modulePascalNamePlural %> = withZod(
        z.object({
          foo: z.union([z.literal('bar'), z.literal('baz')]),
        }),
        z.object({ q: z.string() }),
        async (req, params: { id: string }) => {
            const { id } = params;
            const body = await req.json();
            const q = req.nextUrl.searchParams.get('q');
            <% if(withService) { %>
            return MyThingService.updateMyThingExample(id, q, body);
            <% } else { %>
            return { id, body, q };
            <% } %>
        }
    );

    @post()
    static create<%= modulePascalNamePlural %> = () => {
        // ...
    };

    @del(':id')
    static delete<%= modulePascalNamePlural %> = () => {
        // ...
    };
}