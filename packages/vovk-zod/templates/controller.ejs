<% var modulePascalName = _.upperFirst(_.camelCase(moduleName)); %>
<% var modulePascalNamePlural = pluralize(modulePascalName); %>
<% var controllerName = modulePascalName + 'Controller'; %>
<% var compiledName = modulePascalName + 'RPC'; %>
<% var serviceName = modulePascalName + 'Service'; %>
---
dir: <%= getModuleDirName(segmentName, moduleName) %>
fileName: <%= controllerName + '.ts' %>
sourceName: <%= controllerName %>
compiledName: <%= compiledName %>
---

import { prefix, get, put, post, del } from 'vovk';
import { withZod } from 'vovk-zod';
import { z } from 'zod';
<% if(withService) { %>
import <%= serviceName %> from './<%= serviceName %>';
<% } %>

@prefix('<%= _.kebabCase(moduleName).toLowerCase() %>')
export default class <%= controllerName %> {
    @get()
    static get<%= modulePascalNamePlural %> = withZod(null, z.object({ search: z.string() }), (req) => {
        const search = req.nextUrl.searchParams.get('search');
        <% if(withService) { %>
        return <%= serviceName %>.get<%= modulePascalNamePlural %>(search);
        <% } else { %>
        return { results: [], search };
        <% } %>
    });

    @put(':id')
    static update<%= modulePascalName %> = withZod(
        z.object({
          foo: z.union([z.literal('bar'), z.literal('baz')]),
        }),
        z.object({ q: z.string() }),
        async (req, params: { id: string }) => {
            const { id } = params;
            const body = await req.json();
            const q = req.nextUrl.searchParams.get('q');
            <% if(withService) { %>
            return <%= serviceName %>.update<%= modulePascalName %>(id, q, body);
            <% } else { %>
            return { id, body, q };
            <% } %>
        }
    );

    @post()
    static create<%= modulePascalName %> = () => {
        // ...
    };

    @del(':id')
    static delete<%= modulePascalName %> = () => {
        // ...
    };
}