<% var modulePascalName = _.upperFirst(_.camelCase(moduleName)); %>
<% var modulePascalNamePlural = pluralize(modulePascalName); %>
<% var controllerName = modulePascalName + 'Controller'; %>
<% var compiledName = modulePascalName + 'RPC'; %>
<% var serviceName = modulePascalName + 'Service'; %>
<% var prefix = pluralize(_.kebabCase(moduleName).toLowerCase()); %>
---
dir: <%= getModuleDirName(segmentName, moduleName) %>
fileName: <%= controllerName + '.ts' %>
sourceName: <%= controllerName %>
compiledName: <%= compiledName %>
---

import { prefix, get, put, post, del } from 'vovk';
import { withDto } from 'vovk-dto';
import { IsString, IsIn } from 'class-validator';
<% if(withService) { %>
import <%= serviceName %> from './<%= serviceName %>';
<% } %>

export class Get<%= modulePascalNamePlural %>QueryDto {
  @IsString()
  search: string;
}

export class Update<%= modulePascalName %>BodyDto {
  @IsIn(['bar', 'baz'])
  foo: 'bar' | 'baz';
}

export class Update<%= modulePascalName %>QueryDto {
  @IsString()
  q: string;
}

@prefix('<%= prefix %>')
export default class <%= controllerName %> {
    @get()
    static get<%= modulePascalNamePlural %> = withDto(null, Get<%= modulePascalNamePlural %>QueryDto, (req) => {
        const { search } = req.vovk.query();
        <% if(withService) { %>
        return <%= serviceName %>.get<%= modulePascalNamePlural %>(search);
        <% } else { %>
        return { results: [], search };
        <% } %>
    });

    @put(':id')
    static update<%= modulePascalName %> = withDto(
        Update<%= modulePascalName %>BodyDto,
        Update<%= modulePascalName %>QueryDto,
        async (req, params: { id: string }) => {
            const { id } = params;
            const body = await req.vovk.body();
            const { q } = req.vovk.query();
            <% if(withService) { %>
            return <%= serviceName %>.update<%= modulePascalName %>(id, q, body);
            <% } else { %>
            return { id, body, q };
            <% } %>
        }
    );

    @post()
    static create<%= modulePascalName %> = () => {
        // ...
    };

    @del(':id')
    static delete<%= modulePascalName %> = () => {
        // ...
    };
}