
<%- '// auto-generated\n/* eslint-disable */' %>
import type { VovkClientFetcher } from 'vovk';
import type fetcher from '<%= fetcherClientImportPath %>';
import type createRPC from '<%= createRPCImportPath %>';
<% segments.forEach((segment, i) => { %>
import type { Controllers as Controllers<%= i %> } from "<%= segment.segmentImportPath %>";
<% }) %>
type Options = typeof fetcher extends VovkClientFetcher<infer U> ? U : never;

<% segments.forEach((segment, i) => {
    const segSchema = segmentsSchema[segment.segmentName];
    if (!segSchema || !segSchema.emitSchema) return;
%>
  <% Object.keys(segSchema.controllers).forEach((key) => { %>
export const <%= key %>: ReturnType<typeof createRPC<Controllers<%= i %>["<%= key %>"], Options>>;
  <% }) %>
<% }) %>
