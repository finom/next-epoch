<%- '// auto-generated\n/* eslint-disable */' %>
import { clientizeController, type VovkClientFetcher } from 'vovk/client';
import { promisifyWorker } from 'vovk/worker';
import fetcher from '<%= fetcherClientImportPath %>';
import schema from '<%= schemaOutImportPath %>';

<% if (validateOnClientImportPath) { %>
import validateOnClient from '<%= validateOnClientImportPath %>';
<% } else { %>
const validateOnClient = undefined;
<% } %>

type Options = typeof fetcher extends VovkClientFetcher<infer U> ? U : never;
const apiRoot = '<%= apiEntryPoint %>';

<% segments.forEach((segment, i) => {
    const segSchema = segmentsSchema[segment.segmentName];
    if (!segSchema || !segSchema.emitSchema) return;
%>
  import type { Controllers as Controllers<%= i %>, Workers as Workers<%= i %> } from "<%= segment.segmentImportPath %>";

  <% Object.keys(segSchema.controllers).forEach((key) => { %>
    export const <%= key %> = clientizeController<Controllers<%= i %>["<%= key %>"], Options>(
      schema['<%= segment.segmentName %>'].controllers.<%= key %>, 
      '<%= segment.segmentName %>', 
      { fetcher, validateOnClient, defaultOptions: { apiRoot } }
    );
  <% }) %>

  <% Object.keys(segSchema.workers).forEach((key) => { %>
    export const <%= key %> = promisifyWorker<Workers<%= i %>["<%= key %>"]>(
      null, 
      schema['<%= segment.segmentName %>'].workers.<%= key %>
    );
  <% }) %>
<% }) %>
