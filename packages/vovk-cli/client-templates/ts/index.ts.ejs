<%- '// auto-generated\n/* eslint-disable */' %>
import { createRPC, createWPC, type VovkClientFetcher } from 'vovk';
import fetcher from '<%= fetcherClientImportPath %>';
import schema from '<%= schemaOutImportPath %>';
<% if (validateOnClientImportPath) { %>
import validateOnClient from '<%= validateOnClientImportPath %>';
<% } else { %>
const validateOnClient = undefined;
<% } %>
type Options = typeof fetcher extends VovkClientFetcher<infer U> ? U : never;
const apiRoot = '<%= apiRoot %>';

<% segments.forEach((segment, i) => {
    const segSchema = segmentsSchema[segment.segmentName];
    if (!segSchema || !segSchema.emitSchema) return;
    const hasWorkers = !!Object.keys(segmentsSchema[segment.segmentName].workers).length;
%>
import type { Controllers as Controllers<%= i %><% if(hasWorkers) { %>, Workers as Workers<%= i %> <% } %>} from "<%= segment.segmentImportPath %>";

  <% Object.keys(segSchema.controllers).forEach((key) => { %>
export const <%= key %> = createRPC<Controllers<%= i %>["<%= key %>"], Options>(
  schema['<%= segment.segmentName %>'].controllers.<%= key %>, 
  '<%= segment.segmentName %>', 
  { fetcher, validateOnClient, defaultOptions: { apiRoot } }
);
  <% }) %>

  <% Object.keys(segSchema.workers).forEach((key) => { %>
export const <%= key %> = createWPC<Workers<%= i %>["<%= key %>"]>(
  null, 
  schema['<%= segment.segmentName %>'].workers.<%= key %>
);
  <% }) %>
<% }) %>
