<% var modulePascalName = _.upperFirst(_.camelCase(moduleName)); %>
<% var modulePascalNamePlural = pluralize(modulePascalName); %>
<% var controllerName = modulePascalName + 'Controller'; %>
<% var compiledName = modulePascalName + 'RPC'; %>
<% var serviceName = modulePascalName + 'Service'; %>
---
dirName: <%= getModuleDirName(segmentName, moduleName) %> # Relative to the root dir
fileName: <%= controllerName + '.ts' %>
sourceName: <%= controllerName %> # Used to define import declaration in a segment route file for the given class
compiledName: <%= compiledName %> # Used to define a compiled object name
---

import { prefix, get, put, post, del, type VovkRequest } from 'vovk';
<% if(withService) { %>
import <%= serviceName %> from './<%= serviceName %>';
<% } %>

@prefix('<%= _.kebabCase(moduleName).toLowerCase() %>')
export default class <%= controllerName %> {
    @get()
    static get<%= modulePascalNamePlural %> = async (req: VovkRequest<null, { q: string }>) => {
        const q = req.nextUrl.searchParams.get('q');
        <% if(withService) { %>
        return <%= serviceName %>.get<%= modulePascalNamePlural %>(q);
        <% } else { %>
        return { q };
        <% } %>
    }

    @put(':id')
    static update<%= modulePascalName %> = async (req: VovkRequest<{ foo: 'bar' | 'baz' }, { q: string }>, params: { id: string }) => {
        const { id } = params;
        const body = await req.json();
        const q = req.nextUrl.searchParams.get('q');
        <% if(withService) { %>
        return MyThingService.update<%= modulePascalName %>(id, q, body);
        <% } else { %>
        return { id, body, q };
        <% } %>
    };

    @post()
    static create<%= modulePascalNamePlural %> = () => {
        // ...
    };

    @del(':id')
    static delete<%= modulePascalNamePlural %> = () => {
        // ...
    };
}