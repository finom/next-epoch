{
  "ClientController": {
    "_controllerName": "ClientController",
    "_prefix": "client",
    "_handlers": {
      "getHelloWorldResponseObject": {
        "httpMethod": "GET",
        "path": "get-hello-world-response-object"
      },
      "getHelloWorldObjectLiteral": {
        "httpMethod": "GET",
        "path": "get-hello-world-object-literal"
      },
      "getHelloWorldResponseObjectPromise": {
        "httpMethod": "GET",
        "path": "get-hello-world-response-object-promise"
      },
      "getHelloWorldObjectLiteralPromise": {
        "httpMethod": "GET",
        "path": "get-hello-world-object-literal-promise"
      },
      "getHelloWorldHeaders": {
        "httpMethod": "GET",
        "path": "get-hello-world-headers"
      },
      "getHelloWorldArray": {
        "httpMethod": "GET",
        "path": "get-hello-world-array"
      },
      "getHelloWorldAndEmptyGeneric": {
        "httpMethod": "GET",
        "path": "get-hello-world-and-empty-generic"
      },
      "getWithParams": {
        "path": "with-params/:hello",
        "httpMethod": "GET"
      },
      "postWithParams": {
        "path": "with-params/:hello",
        "httpMethod": "POST"
      },
      "postWithEqualityValidation": {
        "clientValidators": {
          "body": {
            "hello": "body"
          },
          "query": {
            "hey": "query"
          }
        },
        "httpMethod": "POST",
        "path": "post-with-equality-validation"
      },
      "postFormData": {
        "clientValidators": {
          "body": null,
          "query": {
            "type": "object",
            "properties": {
              "hello": {
                "type": "string"
              }
            },
            "required": [
              "hello"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "httpMethod": "POST",
        "path": "post-form-data"
      },
      "postWithZodValidation": {
        "clientValidators": {
          "body": {
            "type": "object",
            "properties": {
              "hello": {
                "type": "string",
                "const": "body"
              }
            },
            "required": [
              "hello"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          },
          "query": {
            "type": "object",
            "properties": {
              "hey": {
                "type": "string",
                "const": "query"
              }
            },
            "required": [
              "hey"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        "httpMethod": "POST",
        "path": "post-with-zod-validation"
      },
      "getWithCustomMetadata": {
        "customMetadata": {
          "hello": "world"
        },
        "httpMethod": "GET",
        "path": "get-with-custom-metadata"
      },
      "generateStaticAPI": {
        "path": "generate-static-api",
        "httpMethod": "POST"
      },
      "generateStaticAPIWithCustomSlug": {
        "path": "generate-static-api-custom-slug",
        "httpMethod": "POST"
      }
    }
  },
  "StreamingController": {
    "_controllerName": "StreamingController",
    "_prefix": "streaming",
    "_handlers": {
      "postWithStreaming": {
        "httpMethod": "POST",
        "path": "post-with-streaming"
      },
      "postWithStreamingAndImmediateError": {
        "httpMethod": "POST",
        "path": "post-with-streaming-and-immediate-error"
      },
      "postWithStreamingAndDelayedError": {
        "httpMethod": "POST",
        "path": "post-with-streaming-and-delayed-error"
      },
      "postWithStreamingAndDelayedCustomError": {
        "httpMethod": "POST",
        "path": "post-with-streaming-and-delayed-custom-error"
      },
      "postWithStreamingAndDelayedUnhandledError": {
        "httpMethod": "POST",
        "path": "post-with-streaming-and-delayed-unhandled-error"
      }
    }
  },
  "StreamingGeneratorController": {
    "_controllerName": "StreamingGeneratorController",
    "_prefix": "streaming-generator",
    "_handlers": {
      "postWithAsyncStreaming": {
        "httpMethod": "POST",
        "path": "post-with-async-streaming"
      },
      "postWithStreaming": {
        "httpMethod": "POST",
        "path": "post-with-streaming"
      },
      "postWithStreamingAndImmediateError": {
        "httpMethod": "POST",
        "path": "post-with-streaming-and-immediate-error"
      },
      "postWithStreamingAndDelayedError": {
        "httpMethod": "POST",
        "path": "post-with-streaming-and-delayed-error"
      },
      "postWithStreamingAndDelayedCustomError": {
        "httpMethod": "POST",
        "path": "post-with-streaming-and-delayed-custom-error"
      },
      "postWithStreamingAndDelayedUnhandledError": {
        "httpMethod": "POST",
        "path": "post-with-streaming-and-delayed-unhandled-error"
      }
    }
  },
  "workers": {
    "MyWorker": {
      "_workerName": "MyWorker",
      "_handlers": {
        "getClientizeHelloWorld": {},
        "calculateFibonacci": {},
        "findLargestPrimeBelow": {},
        "asyncGenerator": {
          "isGenerator": true
        },
        "asyncGeneratorWithError": {
          "isGenerator": true
        },
        "generator": {
          "isGenerator": true
        },
        "generatorWithError": {
          "isGenerator": true
        }
      }
    },
    "MyInnerWorker": {
      "_workerName": "MyInnerWorker",
      "_handlers": {
        "calculateFibonacci": {}
      }
    }
  }
}